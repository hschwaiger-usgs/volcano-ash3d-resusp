#!/bin/bash
#date +%j > jday.txt

# This script checks all the probe values generated by Resusp1_Extract_MetAlarmVars.sh
# and compares to the threshold values listed below.
#   snow depth        > THRESH_SnD=0.1
#   friction velocity > THRESH_FRICV=0.75
#   precip rate       < THRESH_PRATE=0.1
#   Vol Soil Moist.   < THRESH_VSM=0.45
# If all these conditions are met, then an email message is sent via a python script.
# To process all 37 files should only take around a few seconds.
#
# Usage: Resusp2_CheckAlertConditions.sh [yyyymmdd]
#          If argument is not provided, then the UTC date at run time will be used.
#
# Example crontab entry
# 30 6 * * *   /home/ash3d/bin/Resuspension_Alert/Resusp2_CheckAlertConditions.sh     > /home/ash3d/cron_logs/resusp_check_log 2>&1

if [ -z $1 ]
then
    # Get today's date in UTC time
    yearmonthday=`date -u +%Y%m%d`
  else
    yearmonthday=$1
fi
source $HOME/.bash_profile


WINDROOT=/data/WindFiles
NAMAKDATAHOME="${WINDROOT}/nam/091"
FC_day=${yearmonthday}_00                        #name of directory containing current files

PubPage="https://avo-vsc-ash.wr.usgs.gov/resusp.php"
PubDir="/data/www/vsc-ash.wr.usgs.gov/Resusp/"
WarnText="${HOME}/bin/Resuspension_Alert/Resusp_TextWarning_Met.py"

THRESH_SnD=0.1
THRESH_FRICV=0.75
THRESH_FRICV=0.1
THRESH_PRATE=0.1
THRESH_VSM=0.45

loc_start_date=`date`
echo "-----------------------------------------------------------"
echo "Running Resusp2_CheckAlertConditions.sh at ${loc_start_date}"
echo "  Processing data for ${yearmonthday}"
echo "  Using the following thresholds:"
echo "    Snow Depth      = ${THRESH_SnD}"
echo "    Friction Vel.   = ${THRESH_FRICV}"
echo "    Precip. rate    = ${THRESH_PRATE}"
echo "    Vol. Soil Moist = ${THRESH_VSM}"
echo "  Running on ${HOSTNAME}"
echo "-----------------------------------------------------------"

# sanity check
if [ -f ${WarnText} ]; then
  echo "Using ${WarnText} to issue email warnings."
else
  echo "ERROR: cannot file ${WarnText} emailing warning messages."
  exit
fi
if [ -d "$NAMAKDATAHOME/$FC_day" ]; then
  echo "cd $NAMAKDATAHOME/$FC_day"
  cd $NAMAKDATAHOME/$FC_day
else
  echo "ERROR: cannot find download directory $NAMAKDATAHOME/$FC_day"
  exit
fi

#******************************************************************************
#START EXECUTING

nalarmvars=4
alarmvars=("Us" "SnD" "PRATE" "VSm" )
#******************************************************************************
#START EXECUTING

WARNING_SENT=0
SUMMARY_SENT=0

FChour=(00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36)

VarFile="KABU_conditions.txt"
echo "${yearmonthday}" > ${VarFile}
echo "FC hour : Alert Cond : Us (m/s) : SnD (m) : PRATE (mm/hr) : VSm (%)" >> ${VarFile}
for (( FCi=0;FCi<37;FCi++))
do
  AlertCond=0
  echo "Processing FC = ${FChour[FCi]}"
  VarFILE1="wgb_${alarmvars[0]}_00_${FChour[FCi]}.dat"
  VarFILE2="wgb_${alarmvars[1]}_00_${FChour[FCi]}.dat"
  VarFILE3="wgb_${alarmvars[2]}_00_${FChour[FCi]}.dat"
  VarFILE4="wgb_${alarmvars[3]}_00_${FChour[FCi]}.dat"
  VAR1=`cat ${VarFILE1}`
  VAR2=`cat ${VarFILE2}`
  VAR3=`cat ${VarFILE3}`
  VAR4=`cat ${VarFILE4}`
  # Now test to make sure we actually read in numbers for each of these
  if [ -z "$VAR1" ]; then
    valid1=0
    COND1=0
  else
    valid1=1
    COND1=`echo ${VAR1}'>'${THRESH_FRICV} | bc -l`   # Friction Vel must be greater than threshold
  fi
  if [ -z "$VAR2" ]; then
    valid2=0
    COND2=0
  else
    valid2=1
    COND2=`echo ${VAR2}'<'${THRESH_SnD}   | bc -l`   # Snow Depth must be less than threshold
  fi
  if [ -z "$VAR3" ]; then
    valid3=0
    COND3=0
  else
    valid3=1
    COND3=`echo ${VAR3}'<'${THRESH_PRATE} | bc -l`   # Precipitation must be less than threshold
  fi
  if [ -z "$VAR4" ]; then
    valid4=0
    COND4=0
  else
    valid4=1
    COND4=`echo ${VAR4}'<'${THRESH_VSM}   | bc -l`   # Soil moisture must be less than threshold
  fi

  if (( $COND1==0 ));
  then
    # No alert if friction velocity does not exceed threshold, either by value or by non-existance
    echo "${AlertCond}" > Alert_${FChour[FCi]}.txt
    #continue
  else
    # Friction velocity is high enough; now checking the other criteria
    if (( $valid2==1 && $COND2==0 ));
    then
      # Snow depth is a valid number, but not low enough
      echo "${AlertCond}" > Alert_${FChour[FCi]}.txt
      #continue
    else
      if (( $valid3==1 && $COND3==0 ));
      then
        # Precipitation is a valid number, but not low enough
        echo "${AlertCond}" > Alert_${FChour[FCi]}.txt
        #continue
      else
        if (( $valid4==1 && $COND4==0));
        then
          # Soil moisture is a valid number, but not low enough
          echo "${AlertCond}" > Alert_${FChour[FCi]}.txt
          #continue
        else
          # All conditions have been met.  Issue an alert.
          AlertCond=1
          #echo  "${FChour[FCi]} : ${AlertCond} : ${VAR1} : ${VAR2} : ${VAR3} : ${VAR4}" >> ${VarFile}
          echo "${AlertCond}" > Alert_${FChour[FCi]}.txt
          echo "    Alert at time ${FChour[FCi]} :: ${VAR1} ${VAR2} ${VAR3} ${VAR4}"
            # Before sending a warning, check if one has already been sent
          AlertFile1=Alert_${FChour[FCi]}_Sent.txt
          if [ -f ${AlertFile1} ]; then
             echo "Email message has already been sent."
             WARNING_SENT=1
          else
             if (( $WARNING_SENT==0 ));
             then
               echo "Sending email message."
               #/usr/bin/python3 ${WarnText} ${yearmonthday} ${FChour[FCi]} 1
               echo " called ${WarnText} ${yearmonthday} ${FChour[FCi]} 1"
               echo "1" > ${AlertFile1}
               WARNING_SENT=1
             fi
             #exit
          fi
       fi
      fi
    fi
  fi
  echo  " ${FChour[FCi]} : ${AlertCond} : ${VAR1} : ${VAR2} : ${VAR3} :  ${VAR4}" >> ${VarFile}
done

cp ${VarFile} ${PubDir}

loc_end_date=`date`
echo "-----------------------------------------------------------"
echo "Finished Resusp2_CheckAlertConditions.sh at ${loc_end_date}"
echo "-----------------------------------------------------------"

# Now check if the last file has been downloaded and processed
if [ -f wgb_VSm_00_36.dat ]; then
  # If so, we might need to send a summary text; check if any warnings have been sent
  if (( $WARNING_SENT==1 ));
  then
    AlertFile2=Alert_Summary_Sent.txt
    if [ -f ${AlertFile2} ]; then
       echo "Text summary message has already been sent."
       SUMMARY_SENT=1
    else
       if (( $SUMMARY_SENT==0 ));
       then
         echo "Sending Summary text message."
         python ${HOME}/bin/Resuspension_Alert/Resusp_TextWarning.py ${yearmonthday} 36 2
         echo "1" > ${AlertFile2}
         SUMMARY_SENT=1
       fi
    fi
  fi
fi


